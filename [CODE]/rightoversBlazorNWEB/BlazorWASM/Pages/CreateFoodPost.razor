@page "/CreateFoodPost"
@using HttpClients.ClientInterfaces
@using Microsoft.VisualBasic.CompilerServices
@using Domain.Classes
@using Domain.DTOs
@using BlazorWASM.Pages.UIComponents
@inject NavigationManager navMgr
@inject IFoodPostService fpService;

<AuthorizeView>
    <Authorized>
        <div class="d-flex justify-content-around" onmouseenter="@(() => setIsBusiness(context.User.Claims.First(claim => claim.Type.Equals("IsBusiness")).Value))">
            <div class="card-back d-flex justify-content-center">
                <div class="card">
                    <h1 align="center">Food Post details</h1>
                    <div class="form-group field">
                        <RadzenTextBox Placeholder="Enter the title..." Change="@(args => title = args)" Class="w-100 my-2"/>
                    </div>
                    <div class="form-group field">
                        <RadzenTextBox Placeholder="Enter the description..." Change="@(args => description = args)" Class="w-100 my-2"/>
                    </div>
                    <div class="form-group field">
                        <RadzenTextBox Placeholder="Enter the category..." Change="@(args => category = args)" Class="w-100 my-2"/>
                    </div>
                    <div class="form-group field">
                        <RadzenTextBox Placeholder="Enter the days to consume..." Change="@(args => daysLeftToEat = args)" Class="w-100 my-2"/>
                    </div>
                    <div class="form-group field">
                        <RadzenTextBox Placeholder="Enter the image URL..." type="url" Change="@(args => pictureUrl = args)" Class="w-100 my-2"/>
                    </div>
                    @if (!context.User.Claims.First(claim => claim.Type.Equals("IsBusiness")).Value.Equals("False"))
                    {
                        <div class="form-group field">
                            <p>People can pick up the food during your business' opening hours.</p>
                        </div>
                    }
                </div>
            </div>
            @if (context.User.Claims.First(claim => claim.Type.Equals("IsBusiness")).Value.Equals("False"))
            {
                <div class="card-back d-flex justify-content-center">
                    <div class="card">
                        <h1 class="margin-bot">Pickup details</h1>
                        <div class="form-group field d-flex flex-column margin-pickup">
                            <label>Start Date for Pickup</label>
                            <input id="start_date" type="date" @bind="@startDate"/>
                        </div>

                        <div class="form-group field  d-flex flex-column margin-pickup">
                            <label>End Date for Pickup</label>
                            <input id="end_date" type="date" @bind="@endDate"/>
                        </div>

                        <div class="form-group field d-flex flex-column margin-pickup">
                            <label>Start Time for Pickup</label>
                            <input id="start_time" type="time" @bind="@startTime"/>
                        </div>

                        <div class="form-group field d-flex flex-column margin-pickup">
                            <label>End Time for Pickup</label>
                            <input id="end_time" type="time" @bind="@endTime"/>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="d-flex justify-content-center align-items-around flex-column my-4">
            <RadzenButton Variant="Variant.Flat" Shade="Shade.Lighter" 
                          Click="@(async () => await CreateAsync())" 
                          MouseEnter=@(args => SetUsername(creatorUsername = context.User.Claims.First(claim => claim.Type.Equals("UserName")).Value)) 
                          Text="Create post" ButtonStyle="ButtonStyle.Dark"/>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="d-flex justify-content-center align-items-center">
            <h1>
                You must be logged in to create a post!
            </h1>
        </div>
    </NotAuthorized>

</AuthorizeView>

<Modal ShowModal="showModal">
    <p class="text-center">@resultMsg</p>
    <RadzenButton Variant="Variant.Flat" Shade="Shade.Lighter" Click="@(args => Proceed())" Text="Wonderful!" Class="w-auto btn-text" ButtonStyle="ButtonStyle.Dark"/>
</Modal>

@code {
    private string title;
    private string description;
    private string daysLeftToEat;
    private string category;
    private string pictureUrl;
    private DateOnly startDate;
    private DateOnly endDate;
    private TimeOnly startTime;
    private TimeOnly endTime;
    private string creatorUsername;
    private string isBussiness;

    private string color = "red";
    private bool showModal;
    private string createdDtoString;

    private string resultMsg;

    protected override void OnInitialized()
    {
        initDates();
    }

    private void initDates()
    {
        startDate = DateOnly.FromDateTime(DateTime.Now);
        endDate = DateOnly.FromDateTime(DateTime.Now);
        startTime = TimeOnly.MinValue;
        endTime = TimeOnly.MinValue;
    }

    private void clear()
    {
        title = "";
        category = "";
        description = "";
        pictureUrl = "";
        daysLeftToEat = "";
        initDates();
    }

    private void SeeDate()
    {
        Console.WriteLine(startDate.Day + " " + startDate.Month + " " + startDate.Year);
    }

    private async Task CreateAsync()
    {
        try
        {
            int howManyDays = IntegerType.FromString(daysLeftToEat);
            var myStartDate = new MyDate();
            var myEndDate = new MyDate();
            var myStartTime = new MyTime();
            var myEndTime = new MyTime();
            if (isBussiness.Equals("False"))
            {
                Console.WriteLine("I am here, private");
                myStartDate = new MyDate(startDate.Day, startDate.Month, startDate.Year);
                myEndDate = new MyDate(endDate.Day, endDate.Month, endDate.Year);
                myStartTime = new MyTime(startTime.Hour, startTime.Minute);
                myEndTime = new MyTime(endTime.Hour, endTime.Minute);
            }
            else
            {
                Console.WriteLine("I am here, biz");
                myStartDate = new MyDate(1, 1, 1);
                myEndDate = new MyDate(1, 1, 1);
                myStartTime = new MyTime(1, 1);
                myEndTime = new MyTime(1, 1);
            }


            var newFoodPost = await fpService.Create(
                new FoodPostCreationDto(
                    title,
                    category,
                    description,
                    pictureUrl,
                    howManyDays,
                    myStartDate,
                    myEndDate,
                    myStartTime,
                    myEndTime,
                    creatorUsername
                    ));

            clear();
            resultMsg = $"Food Post with a title '{newFoodPost.Title}' successfully created!";
            color = "green";
    // createdDtoString = "Your Food Post <" + newFoodPost.Title + "> was created.";
            showModal = true;
            StateHasChanged();
        }
        catch (Exception e)
        {
            resultMsg = e.Message;
            color = "red";
        }
    }

    private void Proceed()
    {
        showModal = false;
        navMgr.NavigateTo("/");
    }

    private void SetUsername(string? username)
    {
        creatorUsername = username;
    }

    private void setIsBusiness(string s)
    {
        Console.WriteLine("I am here");
        this.isBussiness = s;
    }


}