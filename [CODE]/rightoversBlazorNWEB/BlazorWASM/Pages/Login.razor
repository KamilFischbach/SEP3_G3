@page "/Login"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using BlazorWASM.Pages.UIComponents
@inject IUserService userService
@inject NavigationManager navMgr

<AuthorizeView>
    <NotAuthorized>
        <div class=" card-back flex-column align-items-center justify-content-center my-5">
            <div class="card flex-column align-items-center justify-content-between">
                <h3>Login</h3>
                <div class="field d-flex justify-content-between">
                    <label>Username:</label>
                    <input type="text" @bind="userName" on/>
                </div>
                <div class="field d-flex justify-content-between">
                    <label style="text-align: center">Password:</label>
                    <input type="password" @bind="password"/>
                </div>
                @if (!string.IsNullOrEmpty(errorLabel))
                {
                    <div class="field">
                        <label style="color: red">
                            @errorLabel
                        </label>
                    </div>
                }
            </div>
            <div class="d-flex flex-column justify-content-around my-4 ">
                <RadzenButton Variant="Variant.Flat" Shade="Shade.Lighter" Click="@(args => LoginAsync())" Text="Login" ButtonStyle="ButtonStyle.Dark"/>
                <a id="register_link" onclick="@Register">Register</a>
                @*
                <RadzenButton Variant="Variant.Flat" Shade="Shade.Lighter" Click=@(args => Register()) Text="Register" ButtonStyle="ButtonStyle.Dark"/> 
                *@
            </div>
        </div>

    </NotAuthorized>
    <Authorized>
        <Modal ShowModal="showModal">
            <div class="d-flex flex-column justify-content-start align-items-center">
                <p class="m-auto">@msg</p>
                <RadzenButton Variant="Variant.Flat" Shade="Shade.Lighter" Click="@(args => Proceed())" Text="Wonderful!" Class="w-75 btn-text" ButtonStyle="ButtonStyle.Dark"/>
            </div>
        </Modal>
    </Authorized>
</AuthorizeView>

@code {
    private string userName;
    private string password;
    private string errorLabel;
    private string msg;
    private bool showModal;


    private async Task LoginAsync()
    {
        errorLabel = "";
        try
        {
            if (string.IsNullOrEmpty(userName) || string.IsNullOrEmpty(password))
            {
                errorLabel = "Fields cannot be empty!";
            }
            var dto = new UserLoginDto(userName, password);
            await userService.LoginAsync(dto);
            msg = $"Great! {dto.UserName}, you have been successfully logged in!";
            showModal = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorLabel = FormatError(e.Message);
        }
    }
    private string FormatError(string error)
    {
        string[] splitOne = error.Split(',');
        Console.WriteLine(splitOne[1]);
        string[] splitTwo = splitOne[1].Split('"');
        Console.WriteLine(splitTwo[1]);
        return splitTwo[1];

    }
    private void Register()
    {
        navMgr.NavigateTo("/Register");
    }


    private void Proceed()
    {
        navMgr.NavigateTo("/");
    }

}