@page "/UserProfile/{username}"
@using HttpClients.ClientInterfaces
@using Domain.Classes
@inject IFoodPostService foodPostService
@inject IUserService userService
@inject IRatingService ratingService
@inject NavigationManager navMgr
@inject DialogService DialogService

@if (activeFoodPosts == null)
{
    <p>Loading food posts...</p>
}
else if (user == null)
{
    <p>Loading user or user not found</p>
}
else
{
    <div id="profile_header" class="w-75 mx-auto mt-3">
        <div class="d-flex flex-row justify-content-between align-items-center">
            <div class="d-flex flex-row align-items-center">
                <img class="pfp me-3" src="https://media.tenor.com/Mhc96kB5_vYAAAAC/tonton-friends.gif" alt="pfp"/>
                <div class="d-flex flex-column">
                    <h2 class="firstname">@user.FirstName</h2>
                    <h3 class="username">@user.UserName</h3>
                    <br>
                    <h4 class="phone">@user.PhoneNumber</h4>
                </div>
            </div>
            <AuthorizeView>
                <Authorized>
                    <RadzenButton
                        ButtonStyle="ButtonStyle.Dark"
                        Click="async () => { loggedInUsername = context.User.Claims.First(claim => claim.Type.Equals(claimUsername)).Value; await ShowRateDialog();}">
                        Rate
                    </RadzenButton>
                </Authorized>
            </AuthorizeView>


            <div class="d-flex flex-column justify-content-center ratings">
                <div class="d-flex flex-row ">
                    <iconify-icon class="pt-1" icon="tabler:chef-hat" width="25" height="25"></iconify-icon>
                    <p> cook rating: </p><span class="d-inline px-2" id="cook_rating">@avgCookerRating</span>
                </div>
                <div id="picker_rating" class="d-flex flex-row ">
                    <iconify-icon class="pt-1" icon="icon-park-solid:knife-fork" width="25" height="25" style="color: white;"></iconify-icon>
                    <p> picker rating: </p><span class="d-inline px-2"> @avgPickerRating</span>
                </div>

            </div>
        </div>


    </div>
    <div id="profile_body">
        <RadzenTabs TabPosition="@tabPosition" Class="w-75 my-5 mx-auto" RenderMode="TabRenderMode.Client">
            <Tabs>
                <RadzenTabsItem Text="Food Posts">
                    <RadzenDataList PageSize="6" WrapItems="true" AllowPaging="true" Data="@activeFoodPosts" TItem="FoodPost">
                        <Template Context="foodPost">
                            <RadzenCard Style="width: 250px;" Class="rz-border-radius-3">
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <RadzenBadge BadgeStyle="BadgeStyle.Light" Text=@(foodPost.StartDate.DayAndMonth() + "-" + foodPost.EndDate.DayAndMonth()) Class="me-1" IsPill="true"/>
                                    </div>
                                    <div class="col-md-6 text-end">
                                        <RadzenBadge BadgeStyle="BadgeStyle.Dark" Text=@(foodPost.StartTime.ToString() + " - " + foodPost.EndTime.ToString()) Class="me-1" IsPill="true"/>
                                    </div>
                                </div>
                                <div class="d-flex flex-row align-items-center">
                                    @* pfp and username *@
                                    <div class="d-flex flex-column me-3">
                                        <RadzenImage onclick="@(() => GoToFoodPost(foodPost.PostId))" Path=@foodPost.PictureUrl Class="rz-border-radius-10 float-start" Style="width: 80px; height: 80px; cursor: pointer;"/>
                                        <RadzenBadge onclick="@(() => GoToUserProfile(foodPost.User.UserName))" class="mt-2 pointer" BadgeStyle="BadgeStyle.Secondary" Shade="Shade.Lighter" Text=@(foodPost.User.UserName) IsPill="true"/>
                                    </div>
                                    <div>
                                        <a class="post-title" onclick="@(() => GoToFoodPost(foodPost.PostId))">@foodPost.Title</a>
                                        <RadzenText TextStyle="TextStyle.Body2" class="mb-0">@foodPost.Category</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Caption" class="mb-0">@($"Expires in {foodPost.DaysUntilExpired} days")</RadzenText>
                                    </div>
                                </div>
                            </RadzenCard>
                        </Template>
                    </RadzenDataList>
                </RadzenTabsItem>
                <RadzenTabsItem Text="Ratings">
                    <RadzenDataList PageSize="6" WrapItems="true" AllowPaging="true" Data="@ratings" TItem="Rating">
                        <Template Context="rating">
                            <RadzenCard Style="width: 250px;" Class="rz-border-radius-3">
                                <div class="row">
                                    <RadzenRating ReadOnly="true" Stars="5" Value=@rating.Value></RadzenRating>
                                </div>
                                <div class="row">
                                    <RadzenText TextStyle="TextStyle.Subtitle1" class="mb-0">
                                        <strong>@username as a @rating.TypeOfRating</strong>
                                    </RadzenText>
                                </div>
                                <div class="d-flex flex-row align-items-center">
                                    <div class="d-flex flex-column me-3">
                                        @switch (rating.TypeOfRating)
                                        {
                                            case "cook":
                                                <RadzenImage Path=@cookUrls[rating.Value] Class="float-start" Style="width: 80px; height: 80px;"/>
                                                break;
                                            case "picker":
                                                <RadzenImage Path=@pickerUrls[rating.Value] Class="float-start" Style="width: 80px; height: 80px;"/>
                                                break;
                                        }
                                        <RadzenBadge class="mt-2" BadgeStyle="BadgeStyle.Secondary" Shade="Shade.Lighter" Text=@rating.UsernameMakingRating IsPill="true"/>
                                    </div>
                                    <div>
                                        <RadzenText TextStyle="TextStyle.Body2" class="mb-0">@rating.Comment</RadzenText>
                                    </div>
                                </div>
                            </RadzenCard>
                        </Template>
                    </RadzenDataList>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </div>
    
    <AuthorizeView>
        <Authorized>
            @if (context.User.Claims.First(claim => claim.Type.Equals("UserName")).Value.Equals("admin"))
            {
                <h1>Reports</h1>
                <RadzenDataGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                Data="@reports" TItem="Report" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="Report" Property="UsernameReporting" Title="Reporter" Frozen="true" Width="160px"/>
                        <RadzenDataGridColumn TItem="Report" Property="FoodPostId" Title="Foodpost ID" Width="160px"/>
                        <RadzenDataGridColumn TItem="Report" Property="Comment" Title="Comment" Width="170px"/>
                        <RadzenDataGridColumn Width="160px" TItem="Report" Property="FoodPostId" Title="Meal Details">
                            <Template Context="data">
                                <RadzenButton ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="info" class="m-1 align-content-center" Click="() => ViewPost(data.FoodPostId)"></RadzenButton>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
                <RadzenButton Variant="Variant.Flat" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Danger" 
                              Click=@(args => DeleteUser())
                              Text="Delete User"/>
            }
        </Authorized>
    </AuthorizeView>
}

@code {
    private String claimUsername = "UserName"; // pls ignore i have some problems
    private IEnumerable<FoodPost> allFoodPosts;
    private IEnumerable<FoodPost> activeFoodPosts;
    private IEnumerable<Reservation> reservations;
    private List<Rating> ratings;
    private IEnumerable<Report> reports;

    [Parameter]
    public string username { get; set; }

    private User user;
    public double avgCookerRating { get; set; }
    public double avgPickerRating { get; set; }

    private readonly string cookOneStarPicUrl = "http://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-12/256/face-vomiting.png";
    private readonly string cookTwoStarsPicUrl = "http://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-12/256/nauseated-face.png";
    private readonly string cookThreeStarsPicUrl = "http://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-12/256/face-with-stuck-out-tongue.png";
    private readonly string cookFourStarsPicUrl = "http://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-12/256/face-savouring-delicious-food.png";
    private readonly string cookFiveStarsPicUrl = "http://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-12/256/star-struck.png";

    private readonly string pickerOneStarPicUrl = "http://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-12/256/skull-and-crossbones.png";
    private readonly string pickerTwoStarsPicUrl = "http://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-12/256/grimacing-face.png";
    private readonly string pickerThreeStarsPicUrl = "http://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-12/256/upside-down-face.png";
    private readonly string pickerFourStarsPicUrl = "http://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-12/256/grinning-face-with-smiling-eyes.png";
    private readonly string pickerFiveStarsPicUrl = "http://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-12/256/smiling-face-with-halo.png";

    private int ratingType = 1;
    private String ratingComment = "";
    private int ratingValue = 1;

    private String loggedInUsername = "";

    private Dictionary<int, string> cookUrls { get; set; }
    private Dictionary<int, string> pickerUrls { get; set; }

    readonly TabPosition tabPosition = TabPosition.Left;

    protected override async Task OnInitializedAsync()
    {
        InitCookPicUrls();
        InitPickerPicUrls();
        user = await userService.GetUserByUsername(username);
        await InitFoodPosts();
        reservations = await userService.GetAllReservationsByUser(username);
        await InitRatings();
        reports = await userService.GetReportsAgainstUserAsync(username);
    }

    private async Task InitFoodPosts()
    {
        allFoodPosts = await foodPostService.GetAllFoodPostsByUser(username);
        activeFoodPosts = allFoodPosts.Where(fp => fp.PostState.Equals("posted"));
    }

    private async Task InitRatings()
    {
        ratings = await ratingService.GetAllByUserRated(username);
        avgCookerRating = GetAvgCookerRating();
        avgPickerRating = GetAvgPickerRating();
    }

    private void GoToFoodPost(int fpId)
    {
        navMgr.NavigateTo($"/PostDetails/{fpId}");
    }

    protected void NavigateToProfile(string username)
    {
        navMgr.NavigateTo($"/UserProfile/{username}");
    }
    
    private void GoToUserProfile(string username)
    {
        navMgr.NavigateTo($"/UserProfile/{username}");
    }

    protected void InitCookPicUrls()
    {
        cookUrls = new Dictionary<int, string>{
            [1] = cookOneStarPicUrl,
            [2] = cookTwoStarsPicUrl,
            [3] = cookThreeStarsPicUrl,
            [4] = cookFourStarsPicUrl,
            [5] = cookFiveStarsPicUrl
        };
    }

    protected void InitPickerPicUrls()
    {
        pickerUrls = new Dictionary<int, string>{
            [1] = pickerOneStarPicUrl,
            [2] = pickerTwoStarsPicUrl,
            [3] = pickerThreeStarsPicUrl,
            [4] = pickerFourStarsPicUrl,
            [5] = pickerFiveStarsPicUrl
        };
    }

    protected double GetAvgCookerRating()
    {
        int total = 0;
        var cookerRatings = ratings.Where(r => r.TypeOfRating.Equals("cook"));
        if (!cookerRatings.Any())
        {
            return 0;
        }
        foreach (var rating in cookerRatings)
        {
            total += rating.Value;
        }
        double avg = total / Convert.ToDouble(cookerRatings.Count());
        return avg;
    }

    protected double GetAvgPickerRating()
    {
        int total = 0;
        var pickerRatings = ratings.Where(r => r.TypeOfRating.Equals("picker"));
        if (!pickerRatings.Any())
        {
            return 0;
        }
        foreach (var rating in pickerRatings)
        {
            total += rating.Value;
        }
        double avg = total / Convert.ToDouble(pickerRatings.Count());
        return avg;
    }

    private void clearRating()
    {
        ratingType = 1;
        ratingValue = 1;
        ratingComment = "";
    }

    private async Task SubmitRating()
    {
        String type = "";
        switch (ratingType)
        {
            case 1:
                type = "cook";
                break;
            case 2:
                type = "picker";
                break;
        }
        Rating newRating = new Rating(
            loggedInUsername,
            username, ratingValue,
            ratingComment, type);
        await ratingService.AddRating(newRating);
        await InitRatings();
        clearRating();
        
    }

    async Task ShowRateDialog()
    {
        var result = await DialogService.OpenAsync($"Rate {username}.", ds =>
            @<div class="d-flex flex-column">
                <div class="d-flex flex-row justify-content-center">
                    <RadzenRadioButtonList @bind-Value=@ratingType TValue="int">
                        <Items>
                            <RadzenRadioButtonListItem Text="Cook" Value="1"/>
                            <RadzenRadioButtonListItem Text="Picker" Value="2"/>
                        </Items>
                    </RadzenRadioButtonList>
                </div>
                <div class="big d-flex flex-row m-2 justify-content-center">
                    <RadzenRating @bind-Value=@ratingValue></RadzenRating>
                </div>
                <div class="d-flex flex-column">
                    <p class="no-mb">Leave a comment?</p>
                    <RadzenTextArea class="mb-2" @bind-Value=@ratingComment></RadzenTextArea>
                </div>
                <div class="d-flex flex-row justify-content-evenly">
                    <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" Class="me-1" Style="width: 80px;"/>
                    <RadzenButton Text="Rate" Click="async () => { await SubmitRating(); ds.Close(true); }" Class="me-1" Style="width: 80px;"/>
                </div>
            </div>);
    }

    public async Task DeleteUser()
    {
        var confirm = await DialogService.Confirm("Are you sure?", "MyTitle",
            new ConfirmOptions(){OkButtonText = "Yes", CancelButtonText = "No"});
        if (confirm.Value)
        {
            await userService.DeleteUserAsync(username);
        }
    }

    private void ViewPost(int postId)
    {
        try
        {
            navMgr.NavigateTo($"/ReportedPostDetails/{postId}");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

}