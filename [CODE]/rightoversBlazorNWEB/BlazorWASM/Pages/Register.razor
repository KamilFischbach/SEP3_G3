@inject IUserService userService
@inject NavigationManager navMgr
@page "/Register"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using Domain.Classes
@using BlazorWASM.Pages.UIComponents

<div class="d-flex flex-column align-items-center card-back">
    <RadzenCard class="my-2 w-75 ">
        <div class="d-flex flex-column justify-content-around">
            <RadzenText Text="User credentials"></RadzenText>
            <RadzenTextBox Placeholder="Enter your first name..." Change="@(args => userDto.FirstName = args)" Class="w-100 my-2"/>

            <RadzenTextBox Placeholder="Enter your phone number..." Change="@(args => userDto.PhoneNumber = args)" Class="w-100 my-2"/>

            <RadzenTextBox Placeholder="Enter your user name..." Change="@(args => userDto.UserName = args)" Class="w-100 my-2"/>

            <RadzenPassword Placeholder="Enter your password..." Change="@(args => userDto.Password = args)" Class="w-100 my-2"/>
        </div>

        <RadzenCard>
            <RadzenCheckBox @bind-Value="@BusinessCheckbox" Name="CheckBox1" TValue="bool" Change=@(args => OnChange(args, "CheckBox1 CheckBox"))></RadzenCheckBox>
            <RadzenLabel Text="Register as a Business User" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle;"/>
        </RadzenCard>
    </RadzenCard>

    <RadzenCard class="my-2 w-75 " Visible="BusinessCheckbox">
        <div class="d-flex flex-column justify-content-around">
            <RadzenText Text="Take a deep breath, then enter your opening hours"></RadzenText>
            <br>

        <RadzenCard >
            <RadzenCheckBox @bind-Value="@IsMondayOpenCheckBox" Name="Monday" TValue="bool" Change=@(args => OnChange(args, "CheckBox1 CheckBox"))></RadzenCheckBox>
            <RadzenLabel Text="Open on Monday" Component="MondayCheckBox" Style="margin-left: 8px; vertical-align: middle;"/>
        </RadzenCard>
        <RadzenCard Visible="@IsMondayOpenCheckBox">
                <div class="row">
                    <RadzenText Text="Monday"></RadzenText>
                    <div class="col-lg-6 ">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Opening</RadzenText>
                        <input type="time" @bind="@MondayOpening"/>
                    </div>
                    <div class="col-lg-6">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Closing</RadzenText>
                        <input type="time" @bind="@MondayClosing"/>
                    </div>
                </div>
                <div class="row">
                    <div class="col mt-3">
                        <RadzenButton ButtonStyle="ButtonStyle.Warning" Click="PutMondayHoursForEveryBusinessDay">Duplicate Monday Hours for Every Business Day</RadzenButton>
                    </div>
                </div>
            </RadzenCard>

            
            <RadzenCard >
                        <RadzenCheckBox @bind-Value="@IsTuesdayOpenCheckBox" Name="Tuesday" TValue="bool" Change=@(args => OnChange(args, "CheckBox1 CheckBox"))></RadzenCheckBox>
                        <RadzenLabel Text="Open on Tuesday" Component="TuesdayCheckBox" Style="margin-left: 8px; vertical-align: middle;"/>
                    </RadzenCard>
            <RadzenCard Visible="@IsTuesdayOpenCheckBox">
                <div class="row">
                    <RadzenText Text="Tuesday"></RadzenText>
                    <div class="col-lg-6 ">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Opening</RadzenText>
                        <input type="time" @bind="@TuesdayOpening"/>
                    </div>
                    <div class="col-lg-6">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Closing</RadzenText>
                        <input type="time" @bind="@TuesdayClosing"/>
                    </div>
                </div>
            </RadzenCard>

            
            
            <RadzenCard >
                        <RadzenCheckBox @bind-Value="@IsWednesdayOpenCheckBox" Name="Wednesday" TValue="bool" Change=@(args => OnChange(args, "CheckBox1 CheckBox"))></RadzenCheckBox>
                        <RadzenLabel Text="Open on Wednesday" Component="WednesdayCheckBox" Style="margin-left: 8px; vertical-align: middle;"/>
                    </RadzenCard>
            <RadzenCard Visible="@IsWednesdayOpenCheckBox">
                <div class="row">
                    <RadzenText Text="Wednesday"></RadzenText>
                    <div class="col-lg-6 ">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Opening</RadzenText>
                        <input type="time" @bind="@WednesdayOpening"/>
                    </div>
                    <div class="col-lg-6">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Closing</RadzenText>
                        <input type="time" @bind="@WednesdayClosing"/>
                    </div>
                </div>
            </RadzenCard>

            <RadzenCard >
                        <RadzenCheckBox @bind-Value="@IsThursdayOpenCheckBox" Name="Thursday" TValue="bool" Change=@(args => OnChange(args, "CheckBox1 CheckBox"))></RadzenCheckBox>
                        <RadzenLabel Text="Open on Thursday" Component="ThursdayCheckBox" Style="margin-left: 8px; vertical-align: middle;"/>
                    </RadzenCard>
            <RadzenCard Visible="@IsThursdayOpenCheckBox">
                <div class="row">
                    <RadzenText Text="Thursday"></RadzenText>
                    <div class="col-lg-6 ">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Opening</RadzenText>
                        <input type="time" @bind="@ThursdayOpening"/>
                    </div>
                    <div class="col-lg-6">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Closing</RadzenText>
                        <input type="time" @bind="@ThursdayClosing"/>
                    </div>
                </div>
            </RadzenCard>

            <RadzenCard >
                        <RadzenCheckBox @bind-Value="@IsFridayOpenCheckBox" Name="Friday" TValue="bool" Change=@(args => OnChange(args, "CheckBox1 CheckBox"))></RadzenCheckBox>
                        <RadzenLabel Text="Open on Friday" Component="FridayCheckBox" Style="margin-left: 8px; vertical-align: middle;"/>
                    </RadzenCard>
            <RadzenCard Visible="@IsFridayOpenCheckBox">
                <div class="row">
                    <RadzenText Text="Friday"></RadzenText>
                    <div class="col-lg-6 ">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Opening</RadzenText>
                        <input type="time" @bind="@FridayOpening"/>
                    </div>
                    <div class="col-lg-6">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Closing</RadzenText>
                        <input type="time" @bind="@FridayClosing"/>
                    </div>
                </div>
            </RadzenCard>

            
            
            <RadzenCard >
                        <RadzenCheckBox @bind-Value="@IsSaturdayOpenCheckBox" Name="Saturday" TValue="bool" Change=@(args => OnChange(args, "CheckBox1 CheckBox"))></RadzenCheckBox>
                        <RadzenLabel Text="Open on Saturday" Component="SaturdayCheckBox" Style="margin-left: 8px; vertical-align: middle;"/>
                    </RadzenCard>
            <RadzenCard Visible="@IsSaturdayOpenCheckBox">
                <div class="row">
                    <RadzenText Text="Saturday"></RadzenText>
                    <div class="col-lg-6 ">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Opening</RadzenText>
                        <input type="time" @bind="@SaturdayOpening"/>
                    </div>
                    <div class="col-lg-6">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Closing</RadzenText>
                        <input type="time" @bind="@SaturdayClosing"/>
                    </div>
                </div>
            </RadzenCard>

            <RadzenCard >
                        <RadzenCheckBox @bind-Value="@IsSundayOpenCheckBox" Name="Sunday" TValue="bool" Change=@(args => OnChange(args, "CheckBox1 CheckBox"))></RadzenCheckBox>
                        <RadzenLabel Text="Open on Sunday" Component="SundayCheckBox" Style="margin-left: 8px; vertical-align: middle;"/>
                    </RadzenCard>
            <RadzenCard Visible="@IsSundayOpenCheckBox">
                <div class="row">
                    <RadzenText Text="Sunday"></RadzenText>
                    <div class="col-lg-6 ">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Opening</RadzenText>
                        <input type="time" @bind="@SundayOpening"/>
                    </div>
                    <div class="col-lg-6">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Closing</RadzenText>
                        <input type="time" @bind="@SundayClosing"/>
                    </div>
                </div>
            </RadzenCard>

        </div>


    </RadzenCard>

    <RadzenCard class="my-2 w-75">
        <div class="d-flex flex-column justify-content-around">
            <RadzenText Text="Address"></RadzenText>
            <RadzenTextBox Placeholder="Enter your street name..." Change="@(args => addressDto.Street = args)" Class="w-100 my-2"/>

            <RadzenTextBox Placeholder="Enter your street number with other information..." Change="@(args => addressDto.StreetNumber = args)" Class="w-100 my-2"/>

            <RadzenTextBox Placeholder="Enter your post code..." Change="@(args => addressDto.PostCode = Convert.ToInt32(args))" Class="w-100 my-2"/>

            <RadzenTextBox Placeholder="Enter your city..." Change="@(args => addressDto.City = args)" Class="w-100 my-2"/>

        </div>
    </RadzenCard>
    <RadzenButton Variant="Variant.Flat" Shade="Shade.Lighter" Click="@(args => RegisterUser())" Text="Register" Class="w-75 btn-text" ButtonStyle="ButtonStyle.Dark"/>
    @if (!string.IsNullOrEmpty(errorMsg))
    {
        <RadzenText Text="@errorMsg"></RadzenText>
    }
    <Modal ShowModal="showModal">
        <p>@msg</p>
        <RadzenButton Variant="Variant.Flat" Shade="Shade.Lighter" Click="@(args => Proceed())" Text="Wonderful!" Class="w-75 btn-text" ButtonStyle="ButtonStyle.Dark"/>
    </Modal>
</div>


@code {
    private bool BusinessCheckbox;
    private bool IsMondayOpenCheckBox;
    private bool IsTuesdayOpenCheckBox;
    private bool IsWednesdayOpenCheckBox;
    private bool IsThursdayOpenCheckBox;
    private bool IsFridayOpenCheckBox;
    private bool IsSaturdayOpenCheckBox;
    private bool IsSundayOpenCheckBox;
    private UserCreationDto userDto;
    private AddressCreationDto addressDto;
    private OpeningHoursCreationDto hoursDto;
    private string msg;
    private string errorMsg;
    private bool showModal;

    private TimeOnly MondayOpening;
    private TimeOnly MondayClosing;
    private TimeOnly TuesdayOpening;
    private TimeOnly TuesdayClosing;
    private TimeOnly WednesdayOpening;
    private TimeOnly WednesdayClosing;
    private TimeOnly ThursdayOpening;
    private TimeOnly ThursdayClosing;
    private TimeOnly FridayOpening;
    private TimeOnly FridayClosing;
    private TimeOnly SaturdayOpening;
    private TimeOnly SaturdayClosing;
    private TimeOnly SundayOpening;
    private TimeOnly SundayClosing;

   


    protected override Task OnInitializedAsync()
    {
        userDto = new UserCreationDto();
        addressDto = new AddressCreationDto();
        hoursDto = new OpeningHoursCreationDto();
        return Task.CompletedTask;
    }

    private MyTime ToMyTime(TimeOnly timeonly)
    {
        return new MyTime(timeonly.Hour, timeonly.Minute);
    }

    private void PutHoursIntoHoursDto()
    {
        hoursDto.MondayOpeningHours = ToMyTime(MondayOpening);
        hoursDto.MondayClosingHours = ToMyTime(MondayClosing);
        hoursDto.TuesdayOpeningHours = ToMyTime(TuesdayOpening);
        hoursDto.TuesdayClosingHours = ToMyTime(TuesdayClosing);
        hoursDto.WednesdayOpeningHours = ToMyTime(WednesdayOpening);
        hoursDto.WednesdayClosingHours = ToMyTime(WednesdayClosing);
        hoursDto.ThursdayOpeningHours = ToMyTime(ThursdayOpening);
        hoursDto.ThursdayClosingHours = ToMyTime(ThursdayClosing);
        hoursDto.FridayOpeningHours = ToMyTime(FridayOpening);
        hoursDto.FridayClosingHours = ToMyTime(FridayClosing);
        hoursDto.SaturdayOpeningHours = ToMyTime(SaturdayOpening);
        hoursDto.SaturdayClosingHours = ToMyTime(SaturdayClosing);
        hoursDto.SundayOpeningHours = ToMyTime(SundayOpening);
        hoursDto.SundayClosingHours = ToMyTime(SundayClosing);
    }

    private void PutMondayHoursForEveryBusinessDay()
    {
        IsTuesdayOpenCheckBox = true;
        IsWednesdayOpenCheckBox = true;
        IsThursdayOpenCheckBox = true;
        IsFridayOpenCheckBox = true;
        
        TuesdayOpening = MondayOpening;
        TuesdayClosing = MondayClosing;

        WednesdayOpening = MondayOpening;
        WednesdayClosing = MondayClosing;

        ThursdayOpening = MondayOpening;
        ThursdayClosing = MondayClosing;

        FridayOpening = MondayOpening;
        FridayClosing = MondayClosing;
    }


    private async Task RegisterUser()
    {
        try
        {
            if (ValidDto())
            {
                if (BusinessCheckbox)
                {
                    userDto.IsBusiness = true;
                    hoursDto.Username = userDto.UserName;
                }
                userDto.AddressCreationDto = addressDto;
                Console.WriteLine(userDto.toString());
                var user = await userService.RegisterAsync(userDto);

                if (BusinessCheckbox)
                {
                    setOpenDays();
                    userDto.IsBusiness = true;
                    hoursDto.Username = userDto.UserName;
                    PutHoursIntoHoursDto();
                    await userService.AssignOpeningHoursAsync(hoursDto);
                }
                msg = $"Great! {user.FirstName}, you have been successfully registered!";
                showModal = true;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorMsg = e.Message;
        }
    }

    private bool ValidDto()
    {
        if (string.IsNullOrEmpty(userDto.FirstName)
            || string.IsNullOrEmpty(userDto.UserName)
            || string.IsNullOrEmpty(userDto.Password) || string.IsNullOrEmpty(userDto.PhoneNumber)
            )

        {
            errorMsg = "Fields cannot be empty.";
            return false;
        }
        if (string.IsNullOrEmpty(addressDto.City)
            || string.IsNullOrEmpty(addressDto.Street)
            || string.IsNullOrEmpty(addressDto.StreetNumber)
            || addressDto.PostCode == 0)
        {
            errorMsg = "Fields cannot be empty.";
            return false;
        }
        return true;
    }

    private void Proceed()
    {
        navMgr.NavigateTo("/");
    }

    void OnChange(bool? value, string name)
    {
    }

    void OnChangeTime(DateTime? value, string day, string openClose)
    {
        if (openClose.Equals("Opening"))
        {
            switch (day)
            {
                case "Monday":
                    hoursDto.MondayOpeningHours = new MyTime(value.Value.Hour, value.Value.Minute);
                    
                    break;
                case "Tuesday":
                    hoursDto.TuesdayOpeningHours = new MyTime(value.Value.Hour, value.Value.Minute);
                    break;
                case "Wednesday":
                    hoursDto.WednesdayOpeningHours = new MyTime(value.Value.Hour, value.Value.Minute);
                    break;
                case "Thursday":
                    hoursDto.ThursdayOpeningHours = new MyTime(value.Value.Hour, value.Value.Minute);
                    break;
                case "Friday":
                    hoursDto.FridayOpeningHours = new MyTime(value.Value.Hour, value.Value.Minute);
                    break;
                case "Saturday":
                    hoursDto.SaturdayOpeningHours = new MyTime(value.Value.Hour, value.Value.Minute);
                    break;
                case "Sunday":
                    hoursDto.SundayOpeningHours = new MyTime(value.Value.Hour, value.Value.Minute);
                    break;
            }
        }
        else
        {
            switch (day)
            {
                case "Monday":
                    hoursDto.MondayClosingHours = new MyTime(value.Value.Hour, value.Value.Minute);
                    break;
                case "Tuesday":
                    hoursDto.TuesdayClosingHours = new MyTime(value.Value.Hour, value.Value.Minute);
                    break;
                case "Wednesday":
                    hoursDto.WednesdayClosingHours = new MyTime(value.Value.Hour, value.Value.Minute);
                    break;
                case "Thursday":
                    hoursDto.ThursdayClosingHours = new MyTime(value.Value.Hour, value.Value.Minute);
                    break;
                case "Friday":
                    hoursDto.FridayClosingHours = new MyTime(value.Value.Hour, value.Value.Minute);
                    break;
                case "Saturday":
                    hoursDto.SaturdayClosingHours = new MyTime(value.Value.Hour, value.Value.Minute);
                    break;
                case "Sunday":
                    hoursDto.SundayClosingHours = new MyTime(value.Value.Hour, value.Value.Minute);
                    break;
            }
        }
    }

    private void setOpenDays()
    {
        hoursDto.IsMondayOpen = IsMondayOpenCheckBox;
        hoursDto.IsTuesdayOpen = IsTuesdayOpenCheckBox;
        hoursDto.IsWednesdayOpen = IsWednesdayOpenCheckBox;
        hoursDto.IsThursdayOpen = IsThursdayOpenCheckBox;
        hoursDto.IsFridayOpen = IsFridayOpenCheckBox;
        hoursDto.IsSaturdayOpen = IsSaturdayOpenCheckBox;
        hoursDto.IsSundayOpen = IsSundayOpenCheckBox;

        if (IsMondayOpenCheckBox==false)
        {
            hoursDto.MondayOpeningHours = new MyTime(0, 0);
            hoursDto.MondayClosingHours = new MyTime(0, 0);
        }
        
        if (IsTuesdayOpenCheckBox==false)
        {
            hoursDto.TuesdayOpeningHours = new MyTime(0, 0);
            hoursDto.TuesdayClosingHours = new MyTime(0, 0);
        }
        
        if (IsWednesdayOpenCheckBox==false)
        {
            hoursDto.WednesdayOpeningHours = new MyTime(0, 0);
            hoursDto.WednesdayClosingHours = new MyTime(0, 0);
        }
        
        if (IsThursdayOpenCheckBox==false)
        {
            hoursDto.ThursdayOpeningHours = new MyTime(0, 0);
            hoursDto.ThursdayClosingHours = new MyTime(0, 0);
        }
        
        if (IsFridayOpenCheckBox==false)
        {
            hoursDto.FridayOpeningHours = new MyTime(0, 0);
            hoursDto.FridayClosingHours = new MyTime(0, 0);
        }
        
        if (IsSaturdayOpenCheckBox==false)
        {
            hoursDto.SaturdayOpeningHours = new MyTime(0, 0);
            hoursDto.SaturdayClosingHours = new MyTime(0, 0);
        }
        
        if (IsSundayOpenCheckBox==false)
        {
            hoursDto.SundayOpeningHours = new MyTime(0, 0);
            hoursDto.SundayClosingHours = new MyTime(0, 0);
        }

        
    }

}