@page "/ViewFoodPosts"
@using HttpClients.ClientInterfaces
@using Domain.Classes
@inject IFoodPostService foodPostWebService
@inject NavigationManager navMgr


<RadzenText TextStyle="TextStyle.H3" TagName="TagName.H1" Class="my-4">
    Browse food posts
</RadzenText>


<RadzenText TextStyle="TextStyle.Body1" Class="my-4">
    Choose the meal you would like to save from the list below:
</RadzenText>

@if (posts == null)
{
    <p>Loading...</p>
}

<RadzenDataGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowColumnResize="false" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@postedPosts" TItem="FoodPost" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="FoodPost" Title="Photo" Frozen="true" Sortable="false" Filterable="false" Width="150px" TextAlign="TextAlign.Center">
            <Template Context="data">
                <RadzenImage Path=@data.PictureUrl class="rz-gravatar" />

            </Template>

        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="FoodPost" Property="Title" Title="Title" Frozen="true" Width="160px"/>
        <RadzenDataGridColumn TItem="FoodPost" Property="Category" Title="Category" Width="160px"/>
        <RadzenDataGridColumn TItem="FoodPost" Property="DaysUntilExpired" Title="Days Until Expiration" Width="170px"/>
        <RadzenDataGridColumn Width="160px" TItem="FoodPost" Property="id" Title="Meal Details">
            <Template Context="data">
                <RadzenButton ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="info" class="m-1 align-content-center" Click="() => ViewPost(data.PostId)"></RadzenButton>
            </Template>
        </RadzenDataGridColumn>


    </Columns>
</RadzenDataGrid>


@code {
    private ICollection<FoodPost>? posts;
    private ICollection<FoodPost>? postedPosts;
    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            posts = await foodPostWebService.GetAsync();
            postedPosts = new List<FoodPost>();
            foreach (FoodPost post in posts)
            {
                if (post.PostState.Equals("posted"))
                {
                    postedPosts.Add(post);
                }
                
            } 
            Console.WriteLine("POSTED POSTS= "+postedPosts.Count);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = FormatError(e.Message);
        }
    }
    
    private string FormatError(string error)
    {
        string[] splitOne = error.Split(',');
        Console.WriteLine(splitOne[1]);
        string[] splitTwo = splitOne[1].Split('"');
        Console.WriteLine(splitTwo[1]);
        return splitTwo[1];

    }

    private void ViewPost(int postId)
    {
        try
        {
            navMgr.NavigateTo($"/PostDetails/{postId}");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    /*async Task OpenOrder(int id)
    {
        await DialogService.OpenAsync<DialogCardPage>($"Order {orderId}",
            new Dictionary<string, object>() { { "OrderID", orderId } },
            new DialogOptions() { Width = "700px", Height = "520px" });
    }
*/
}