@page "/Map"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using Microsoft.VisualBasic.CompilerServices
@using Domain.Classes
@inject IAddressService addressService
@inject IUserService userService
@inject IFoodPostService foodPostService
@inject NavigationManager navMgr
@inject IJSRuntime JSRuntime
<div class="container-fluid">
    <div class="row p-3">
        <div class="col">
            <RadzenCard Class="mb-4">
                @msg
            </RadzenCard>
            <RadzenGoogleMap @ref="map" style="height: 400px" Options=@(new Dictionary<string, object> { { "disableDoubleClickZoom", true } })
                             Zoom="@zoom" ApiKey="AIzaSyBiS9FGsUm7TmTcbAcxD3G0HLrUrm1gHG8" Center="@(new GoogleMapPosition { Lat = 55.863352, Lng = 9.838155 })" MapClick="@OnMapClick" MarkerClick="@OnMarkerClick">
                <Markers>
                    @if (postedPosts != null)
                    {
                        @foreach (var item in postedPosts)
                        {
                            item.Title = item.Title + " by " + item.User.UserName;
                            <RadzenGoogleMapMarker
                                Label=@item.PostId.ToString()
                                Position=@(new GoogleMapPosition { Lat = item.User.Address.Latitude, Lng = item.User.Address.Longitude })
                                Title=@item.Title>
                            </RadzenGoogleMapMarker>
                        }
                    }
                </Markers>
            </RadzenGoogleMap>
        </div>
    </div>
    <div>
        <div class="card-back mx-3">
            <div class="card d-flex align-items-start flex-column">
                

            </div>
        </div>
    </div>
</div>


@code {
    private readonly int zoom = 12;
    private bool showHorsensMarker;
    private RadzenGoogleMap map;
    private ICollection<AddressCreationDto>? addressDtos;
    private ICollection<AddressCoords>? coordinates;
    private string msg;
    private string street;
    private string streetNumber;
    private string postCode;
    private string city;
    private bool showModal;
    private string createdDtoString;
    private ICollection<FoodPost> allFoodPosts;
    private ICollection<FoodPost> postedPosts;
    private string spacer = " \n by ";
    private FoodPost? selectedFoodPost;

    private async Task clear()
    {
        street = "";
        streetNumber = "";
        postCode = "";
        city = "";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            postedPosts = new List<FoodPost>();
            allFoodPosts = await foodPostService.GetAsync();
            foreach (var foodPost in allFoodPosts)
            {
                if (foodPost.PostState == "posted")
                {
                    Console.WriteLine("I added the post: " + foodPost.Title);
                    foodPost.User = await userService.GetUserByUsername(foodPost.User.UserName);
                    Console.WriteLine("Here is the address: " + foodPost.User.Address);
                    if (foodPost.User.Address.Latitude == 0)
                    {
                        Address preAddress = foodPost.User.Address;
                        foodPost.User.Address = await addressService.SetCoordsOnExisting(preAddress);
                    }
                    Console.WriteLine("Here are the coords: " + foodPost.User.Address.Latitude + ", " + foodPost.User.Address.Longitude);
                    postedPosts.Add(foodPost);
                }
            }

            Console.Write("Addresses: " + addressDtos);
        }
        catch (
            Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    void OnMapClick(GoogleMapClickEventArgs args)
    {
        Console.Write($"Map clicked at Lat: {args.Position.Lat}, Lng: {args.Position.Lng}");
    }

    async Task OnMarkerClick(RadzenGoogleMapMarker marker)
    {
        navMgr.NavigateTo($"/PostDetails/{marker.Label}");
    }

    async Task OnMarkerEnter(RadzenGoogleMapMarker marker)
    {
        string message = $"Custom information about <b>{marker.Title}</b>";

        string code = $@"
var map = Radzen['{map.UniqueID}'].instance;
var marker = map.markers.find(m => m.title == '{marker.Title}');
if(window.infoWindow) {{window.infoWindow.close();}}
window.infoWindow = new google.maps.InfoWindow({{content: '{message}'}});
setTimeout(() => window.infoWindow.open(map, marker), 200);
";

        await JSRuntime.InvokeVoidAsync("eval", code);
    }

    private async Task Proceed()
    {
        showModal = false;
        await OnInitializedAsync();
        navMgr.NavigateTo("/Map");
    }

    private async Task CreateAsync()
    {
        try
        {
            int postCodeInt = IntegerType.FromString(postCode);
            var newAddress = await addressService.CreateAsync(new AddressCreationDto
            {
                Street = street,
                StreetNumber = streetNumber,
                PostCode = postCodeInt,
                City = city
            });
            await clear();
            createdDtoString = "Your address was added.";
            msg = createdDtoString;
            await Proceed();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    async Task onHover(FoodPost foodPost)
    {
        string message = $"Custom information about <b>{foodPost.Title}</b>";

        string code = $@"
var map = Radzen['{map.UniqueID}'].instance;

if(window.infoWindow) {{window.infoWindow.close();}}
window.infoWindow = new google.maps.InfoWindow({{content: '{message}'}});
setTimeout(() => window.infoWindow.open(map, marker), 200);
";

        await JSRuntime.InvokeVoidAsync("eval", code);
    }

    public void SetSelectedFoodPost(FoodPost? foodPost)
    {
        Console.WriteLine("I set the post to " + foodPost?.Title);
        selectedFoodPost = foodPost;
    }

}