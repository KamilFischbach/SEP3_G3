@page "/Map"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using Microsoft.VisualBasic.CompilerServices
@inject IAddressService addressService
@inject NavigationManager navMgr
@inject IJSRuntime JSRuntime
<div class="container-fluid">
    <div class="row p-3">
        <div class="col">
            <RadzenCard Class="mb-4">
                @msg
            </RadzenCard>
            <RadzenGoogleMap @ref="map" style="height: 400px" Options=@(new Dictionary<string, object>{{"disableDoubleClickZoom", true}})
                             Zoom="@zoom" ApiKey="AIzaSyBiS9FGsUm7TmTcbAcxD3G0HLrUrm1gHG8" Center="@(new GoogleMapPosition{Lat = 55.863352, Lng = 9.838155})" MapClick="@OnMapClick" MarkerClick="@OnMarkerClick">
                <Markers>
                    @if (addressDtos != null)
                    {
                        @foreach (var item in addressDtos)
                        {
                            <RadzenGoogleMapMarker Position=@(new GoogleMapPosition{Lat = item.Latitude, Lng = item.Longitude})></RadzenGoogleMapMarker>
                        }
                    }
                </Markers>
            </RadzenGoogleMap>
        </div>
    </div>
</div>

<div class="card">
    <h3>Mark New Address</h3>
    <div class="form-group field">
        <label>Street:</label>
        <br/>
        <input type="text" @bind="street" @bind:event="oninput"/>
    </div>
    <div class="form-group field">
        <label>Street Number:</label>
        <br/>
        <input type="text" @bind="streetNumber" @bind:event="oninput"/>
    </div>
    <div class="form-group field">
        <label>Post Code:</label>
        <br/>
        <input type="text" @bind="postCode" @bind:event="oninput"/>
    </div>
    <div class="form-group field">
        <label>City: </label>
        <br/>
        <input type="text" @bind="city" @bind:event="oninput"/>

    </div>
    <div class="button-row">
        <button @onclick="CreateAsync" class="acceptbtn">Mark</button>
    </div>
</div>

<div class="d-flex justify-content-center">
    <h3>Food Posts</h3>
</div>
@if (addressDtos == null)
{
    <p>Loading...</p>
}
else if (!addressDtos.Any())
{
    <p>No addresses to display. Sorry :(</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Street</th>
            <th>Street Number</th>
            <th>Post Code</th>
            <th>City</th>
            <th>Latitude</th>
            <th>Longtitude</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in addressDtos)
        {
            <tr>
                <td>@item.Street</td>
                <td>@item.StreetNumber</td>
                <td>@item.PostCode</td>
                <td>@item.City</td>
                <td>@item.Latitude</td>
                <td>@item.Longitude</td>
            </tr>
        }
        </tbody>
    </table>
}


@code {
    private readonly int zoom = 12;
    private bool showHorsensMarker;
    private RadzenGoogleMap map;
    private ICollection<AddressCreationDto>? addressDtos;
    private ICollection<AddressCoords>? coordinates;
    private string msg;
    private string street;
    private string streetNumber;
    private string postCode;
    private string city;
    private bool showModal;
    private string createdDtoString;

    private async Task clear()
    {
        street = "";
        streetNumber = "";
        postCode = "";
        city = "";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            addressDtos = await addressService.GetAsync();
            foreach (var addressDto in addressDtos)
            {
                if (addressDto.Longitude == 0)
                {
                    var coordDto = await addressService.GetCoordsAsync(addressDto);
                    addressDto.Latitude = coordDto.Latitude;
                    addressDto.Longitude = coordDto.Longitude;
                }
            }

            Console.Write("Addresses: " + addressDtos);
        }
        catch (
            Exception e)
        {
            Console.WriteLine(e);
            msg = FormatError(e.Message);
        }
    }
    
    private string FormatError(string error)
    {
        string[] splitOne = error.Split(',');
        Console.WriteLine(splitOne[1]);
        string[] splitTwo = splitOne[1].Split('"');
        Console.WriteLine(splitTwo[1]);
        return splitTwo[1];

    }

    void OnMapClick(GoogleMapClickEventArgs args)
    {
        Console.Write($"Map clicked at Lat: {args.Position.Lat}, Lng: {args.Position.Lng}");
    }

    async Task OnMarkerClick(RadzenGoogleMapMarker marker)
    {
        string message = $"Custom information about <b>{marker.Title}</b>";

        string code = $@"
var map = Radzen['{map.UniqueID}'].instance;
var marker = map.markers.find(m => m.title == '{marker.Title}');
if(window.infoWindow) {{window.infoWindow.close();}}
window.infoWindow = new google.maps.InfoWindow({{content: '{message}'}});
setTimeout(() => window.infoWindow.open(map, marker), 200);
";

        await JSRuntime.InvokeVoidAsync("eval", code);
    }

    private async Task Proceed()
    {
        showModal = false;
        await OnInitializedAsync();
        navMgr.NavigateTo("/Map");
    }

    private async Task CreateAsync()
    {
        try
        {
            int postCodeInt = IntegerType.FromString(postCode);
            var newAddress = await addressService.CreateAsync(new AddressCreationDto{
                Street = street,
                StreetNumber = streetNumber,
                PostCode = postCodeInt,
                City = city
            });
            await clear();
            createdDtoString = "Your address was added.";
            msg = createdDtoString;
            await Proceed();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = FormatError(e.Message);
        }
    }

}